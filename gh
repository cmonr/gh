#!/usr/bin/env bash
# Author: Cruz Monrreal II

set -eufo pipefail

readonly self_name="${0##*/}"
readonly self_version="0.1.1"

usage()
{
  cat - <<EOF
Usage:
  ${self_name} [options] action url [payload]
  ${self_name} [options] --stats
  ${self_name} --version
  ${self_name} --help

Interact with GitHub's API using curl.

Requires a .netrc file for credentials.

  action
    The type of action to perform on a URL.
    Supported actions include: GET, POST, PATCH, DELETE.

  url
    The GitHub API url to perform a request on.

  [payload]
    The json payload used when performing a POST or DELETE <action>.
    Should not be provided with any other <action>.

  -p --paginate
    Pulls ALL pages returned from the request.
  -i --include-headers
    Prints received headers and content.
  -s --stats
    Displays current rate-limit statistics.
  -h --help
    Displays this help.

  --version
    Prints ${self_name} version.

Examples:
  ${self_name} get /user
  ${self_name} post /repos/:owner/:repo/issues/:issue_number/comments \\
    '{"body": "I am a comment."}'
  ${self_name} -i --stats

EOF

  exit "${1:-0}"
}

version() { printf "%s\n" "${self_name} ${self_version}"; exit 0; }
info() { printf "[I] %s\n" "${1}" 1>&2; }
die() { printf "[E] %s\n" "${1}" 1>&2; exit 1; }

urlencode()
{
  sed -e 's/ /%20/g' \
    -e 's/!/%21/g' \
    -e 's/#/%23/g' \
    -e 's/\$/%24/g' \
    -e "s/'/%27/g" \
    -e 's/(/%28/g' \
    -e 's/)/%29/g' <<< "${1}"
}

# Set variables
action=""; 
url=""
payload=""

paginate=false
curl_header_flag=""
fetch_stats=false


# Parse user parameters
for arg in "$@"; do
  case "${arg}" in
    --help | -h ) usage; ;;

    --version ) version; ;;

    --paginate | -p ) paginate=true; ;;

    --include-headers | -i ) curl_header_flag="--include"; ;;

    --stats | -s ) fetch_stats=true; ;;

    --* | -* )
      die "Invalid argument: ${arg}"
      ;;

    *)
      if [[ -z "${action}" ]]; then
        action="${arg}"
      elif [[ -z "${url}" ]]; then
        url="${arg}"
      elif [[ -z "${payload}" ]]; then
        payload="${arg}"
      else
        die "Extra argument: ${arg}"
      fi
      ;;
  esac
done

# Only fetch stats if no other action is specified.
if ${fetch_stats} ; then
  [[ -n "${action}" ]] && usage 1

  action="get"
  url="/rate_limit"
fi

# Pagination consumes headers.
if ${paginate}; then
  [[ -z "${curl_header_flag}" ]] \
    || die "Pagination consumes headers. Invalid flag combination."
fi


# Source GitHub token 
#  Either from env or .netrc file
token="${GH_OAUTH_TOKEN:-}"
[ -n "${token}" ] \
  || token="$(
      tr '\n' ' ' < ~/.netrc \
        | tr -s ' ' \
        | sed 's_.*machine github.com_machine github.com_g' \
        | cut -d' ' -f6
      )"
[ -n "${token}" ] \
  || die "Unable to source GitHub OAuth Token ('GH_OAUTH_TOKEN')."


# Verify key parameters are not empty
[ -n "${url}" ] || die "Url not provided"
[ -n "${action}" ] || die "Action not provided"
[ -n "${token}" ] || die "Could not source GitHub token."


# Validate action/payload combinations
case "${action}" in
  get | patch ) ;;
  delete )
    [[ -z "${payload}" ]] || die "Payload not used with ${action}: '${payload}'"
    ;;
  post | put )
    [[ -n "${payload}" ]] || die "Payload for ${action} not provided"
    ;;
  *)
    die "Error. Unknown action: ${action}"
esac

# Normalize variables
action=$(tr '[:lower:]' '[:upper:]' <<< "${action}")
url="${url#*github.com}"


#
# Do the thing
#
cleanup() {
  rm "/tmp/gh.headerFifo" &>/dev/null || true
  find '/tmp/' -name 'gh.*.json' -exec rm {} \; 2>/dev/null || true
}
onCtrlC() { cleanup; exit 0; }
trap onCtrlC SIGINT

if ${paginate}; then
  [ ! -e "/tmp/gh.headerFifo}" ] \
    || die "Header fifo detected.
  Is anotehr instance of '${self_name} -p' running?"

  mkfifo "/tmp/gh.headerFifo"

  curl --silent \
    --dump-header "/tmp/gh.headerFifo" \
    --request "${action}" \
    --header "Authorization: token ${token}" \
    --header "Content-Type: application/json" \
    --data "@${payload}" \
    --url "$(urlencode "https://api.github.com${url}?per_page=10")" \
      > "/tmp/gh.1.json" &

  pidList=$!

  lastPage="$(
    < "/tmp/gh.headerFifo" \
      sed -e '\_^Link:_!d' \
        | tr '<' $'\n' \
        | sed -e '\_last_!d' \
              -e 's_.*page=__g' \
              -e 's_>.*__g' \
        || true
  )"
  rm "/tmp/gh.headerFifo"

  [ -n "${lastPage}" ] || lastPage=1
    
  if [ "${lastPage}" -gt 1 ] ; then
    for page in $(seq 2 "${lastPage}"); do
      
      curl --silent \
        --request "${action}" \
        --header "Authorization: token ${token}" \
        --header "Content-Type: application/json" \
        --data "@${payload}" \
        --url "$(urlencode "https://api.github.com${url}?per_page=10&page=${page}")" \
          > "/tmp/gh.${page}.json" &

      pidList="${pidList} $!"
    done
  fi

  trap cleanup EXIT


  # shellcheck disable=SC2086
  [ -z "${pidList}" ] || wait ${pidList}
  

  fileList="$(
    find '/tmp' -name 'gh.*.json' 2>/dev/null \
      | sort \
      | paste -s -d' ' \
      || true
  )"

  [ -n "${fileList}" ] || die "Unknown error. The files disappeared before merging!"

  # shellcheck disable=SC2086
  jq -s '.[]' ${fileList}
else
  curl --silent ${curl_header_flag} \
    --request "${action}" \
    --header "Authorization: token ${token}" \
    --header "Content-Type: application/json" \
    --data "@${payload}" \
    --url "$(urlencode "https://api.github.com${url}"?per_page=100)"
fi
