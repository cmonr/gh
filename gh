#!/bin/bash -euf
# Author: Cruz Monrreal II

set -o pipefail

readonly self_name=${0##*/}
readonly self_version="0.0.2"

usage()
{
  cat - <<EOF
Usage:
  ${self_name} [options] action url [payload]
  ${self_name} [options] --stats
  ${self_name} --version
  ${self_name} --help

Interact with GitHub's API using curl.

Requires a .netrc file for credentials.

  action
    The type of action to perform on a URL.
    Supported actions include: GET, POST, PATCH, DELETE.

  url
    The GitHub API url to perform a request on.

  [payload]
    The json payload used when performing a POST or DELETE <action>.
    Should not be provided with any other <action>.

  -i --include-headers
    Prints received headers and content.
  -p --paginate
    Pulls ALL pages returned from the request.
  -s --stats
    Displays current rate-limit statistics.
  -h --help
    Displays this help.

  --version
    Prints ${self_name} version.

Examples:
  ${self_name} get /user
  ${self_name} post /repos/:owner/:repo/issues/:issue_number/comments \
    '{"body": "I am a comment."}'
  ${self_name} -i --stats

EOF

  exit "${1:-0}"
}

version() { printf "%s\n" "${self_name} ${self_version}"; exit 0; }
die() { printf "[E] %s\n" "${1}" 1>&2; exit 1; }

urlencode()
{
  sed -e 's/ /%20/g' \
    -e 's/!/%21/g' \
    -e 's/#/%23/g' \
    -e 's/\$/%24/g' \
    -e "s/'/%27/g" \
    -e 's/(/%28/g' \
    -e 's/)/%29/g' <<< "${1}"
}

# Set variables
action=""; 
url=""
payload=""

paginate=false
curl_header_flag=""
fetch_stats=false


# Parse user parameters
for arg in "$@"; do
  case "${arg}" in
    --help | -h )
      usage
      ;;

    --version )
      version
      ;;

    --paginate | -p )
      paginate=true
      ;;

    --include-headers | -i )
      curl_header_flag="--include"
      ;;

    --stats | -s )
      fetch_stats=true
      ;;

    --* | -* )
      die "Invalid argument: ${arg}"
      ;;

    *)
      if [[ -z "${action}" ]]; then
        action="${arg}"
      elif [[ -z "${url}" ]]; then
        url="${arg}"
      elif [[ -z "${payload}" ]]; then
        payload="${arg}"
      else
        die "Extra argument: ${arg}"
      fi
      ;;
  esac
done

# Only fetch stats if no other action is specified.
if ${fetch_stats} ; then
  [[ ! -z "${action}" ]] && usage 1

  action="get"
  url="/rate_limit"
fi

# Pagination consumes headers.
if ${paginate}; then
  [[ -z "${curl_header_flag}" ]] \
    || die "Pagination consumes headers. Invalid flag combination."
fi


# Source GitHub token from ~/.netrc
token=$(
  tr '\n' ' ' < ~/.netrc \
    | tr -s ' ' \
    | grep "machine github.com" \
    | cut -d' ' -f6 \
)

# Verify key parameters are not empty
[ -z "${url}" ] && die "Url not provided"
[ -z "${action}" ] && die "Action not provided"
[ -z "${token}" ] && die "Could not source GitHub token."


# Validate action/payload combinations
case "${action}" in
  get | delete )
    [[ ! -z "${payload}" ]] && die "Payload not used with ${action}: '${payload}'"
    ;;
  post | patch | put )
    [[ -z "${payload}" ]] && die "Payload for ${action} not provided"
    ;;
  *)
    die "Error. Unknown action: ${action}"
esac

# Normalize variables
action=$(tr '[:lower:]' '[:upper:]' <<< "${action}")
url=$(sed 's_.*github.com/_/_' <<< "${url}")


#
# Do the thing
#
if ${paginate}; then
  rm /tmp/gh.*.json &> /dev/null \
    || true

  curl --silent --include \
    --request "${action}" \
    --header "Authorization: token ${token}" \
    --header "Content-Type: application/json" \
    --data "@${payload}" \
    --url "$(urlencode "https://api.github.com${url}?per_page=100")" \
    | tee >( \
      header=$(sed -e '1,\_^\r_!d')
      cat - > /dev/null

      lastPage="$(
        <<< "${header}" \
          sed -e '\_^Link:_!d' \
            | tr '<' $'\n' \
            | sed -e '\_last_!d' \
                  -e 's_.*page=__g' \
                  -e 's_>.*__g'
      )"
      [ -n "${lastPage}" ] || lastPage=1
        

      pidList=""
      for page in $(seq 2 "${lastPage}"); do
        > "/tmp/gh.${page}.json" \
          curl --silent \
            --request "${action}" \
            --header "Authorization: token ${token}" \
            --header "Content-Type: application/json" \
            --data "@${payload}" \
            --url "$(urlencode "https://api.github.com${url}?per_page=100&page=${page}")" &

        pidList="${pidList} $!"
      done

      wait ${pidList}

    ) \
      | sed -e '1,\_^\r_d' > "/tmp/gh.1.json"


    fileList="$(
      find '/tmp' -name 'gh.*.json' 2>/dev/null \
        | sort \
        | paste -s -d' ' \
        || true
    )"

    jq -s '.[]' ${fileList}

    rm /tmp/gh.*.json &> /dev/null \
      || true
else
  curl --silent ${curl_header_flag} \
    --request "${action}" \
    --header "Authorization: token ${token}" \
    --header "Content-Type: application/json" \
    --data "@${payload}" \
    --url "$(urlencode "https://api.github.com${url}")"
fi
