#!/bin/bash -euf
# Author: Cruz Monrreal II

set -o pipefail

readonly self_name=${0##*/}
readonly self_version="0.0.1"

function usage()
{
  
  cat <<EOF
Usage:
  ${self_name} [options] action url [payload]
  ${self_name} [options] --stats
  ${self_name} --version
  ${self_name} --help

Interact with GitHub's API using curl.

  action
    The type of action to perform on a URL.
    Supported actions include: GET, POST, PATCH, DELETE.

  url
    The GitHub API url to perform a request on.

  [payload]
    The json payload used when performing a POST or DELETE <action>.
    Should not be provided with any other <action>.

  -i --include-headers
    Prints received headers and content.
  -s --stats
    Displays current rate-limit statistics.
  -h --help
    Displays this help

  --version
    Prints ${self_name} verison.

EOF

  exit "${1:-0}"
}

function version()
{
  printf "${self_name} ${self_version}\r\n"
  exit 0
}

function die()
{
  echo "${1}" 1>&2
  exit 1
}

function urlencode()
{
  sed -e 's/ /%20/g' \
    -e 's/!/%21/g' \
    -e 's/#/%23/g' \
    -e 's/\$/%24/g' \
    -e "s/'/%27/g" \
    -e 's/(/%28/g' \
    -e 's/)/%29/g' <<< "${1}"
}


# Source GitHub token from ~/.netrc
token=$(
  tr '\n' ' ' < ~/.netrc \
    | tr -s ' ' \
    | grep "machine github.com" \
    | cut -d' ' -f6 \
    || die "Could not source GitHub token."
  )


# Set variables
action=""; 
url=""
payload=""

curl_header_flag=""
fetch_stats=false


# Parse user parameters
for arg in "$@"; do
  case "${arg}" in
    --help | -h )
      usage
      ;;

    --version )
      version
      ;;

    --include-headers | -i )
      curl_header_flag="--include"
      ;;

    --stats | -s )
      fetch_stats=true
      ;;

    --* | -* )
      die "Invalid argument: ${arg}"
      ;;

    *)
      if [[ -z "${action}" ]]; then
        action="${arg}"
      elif [[ -z "${url}" ]]; then
        url="${arg}"
      elif [[ -z "${payload}" ]]; then
        payload="${arg}"
      else
        die "Extra argument: ${arg}"
      fi
      ;;
  esac
done

# Only fetch stats if no other action is specified.
if ${fetch_stats} ; then
  [[ ! -z "${action}" ]] && usage 1

  action="get"
  url="/rate_limit"
fi


# Verify key parameters are not empty
[[ -z "${url}" ]] && die "Url not provided"
[[ -z "${action}" ]] && die "Action not provided"

# Validate action/payload combinations
case "${action}" in
  get | delete )
    [[ ! -z "${payload}" ]] && die "Payload not used with ${action}: '${payload}'"
    ;;
  post | patch )
    [[ -z "${payload}" ]] && die "Payload for ${action} not provided"
    ;;
  *)
    die "Unknown action: ${action}"
esac

# Normalize variables
action=$(tr '[:lower:]' '[:upper:]' <<< "${action}")
url=$(sed 's_.*github.com/_/_' <<< "${url}")


# Do the thing
curl --silent ${curl_header_flag} \
  --request "${action}" \
  --header "Authorization: token ${token}" \
  --header "Content-Type: application/json" \
  --data "@${payload}" \
  --url "$(urlencode "https://api.github.com${url}")"
